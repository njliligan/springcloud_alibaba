spring:
  kafka:
    bootstrap-servers: bl-kafka-001:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: latest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false
  cloud:
    nacos:
      server-addr: 127.0.0.1:8848
      config:
        file-extension: yaml
        server-addr: 127.0.0.1:8848
        prefix: ${spring.application.name}
        group: DEV_GROUP
        namespace: 3ee843f9-70ee-4701-9ad3-75aa5a35563b
      discovery:
        server-addr: 127.0.0.1:8848
        enabled: true
        group: DEV_GROUP
        namespace: 3ee843f9-70ee-4701-9ad3-75aa5a35563b
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    #MySQL配置
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/miky?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false
    username: root
    password: root
dubbo:
  # 配置服务信息
  scan:
    base-packages: com/njganlili/providerservice/service/impl
  application:
    name: service-provider
    # 禁用QOS同一台机器可能会有端口冲突现象
    qos-enable: false
    qos-accept-foreign-ip: false
  # 配置注册中心
  registry:
    address: nacos://localhost:8848
    check: true
  # 设置协议-协议由提供方指定消费方被动接受
  protocol:
    name: dubbo
    port: 20880
    dispatcher: all
    threadpool: fixed
    threads: 20
  consumer:
    retries: 2
  provider:
    retries: 2
  cloud:
    subscribed-services: service-consumer
# seata配置
seata:
  enabled: true  # 开启自动配置
  #将 RM 管理的本地事物注册到seata-server,application-id的名称跟微服务名相同即可，启动日志可验证
  application-id: ${spring.application.name}
  tx-service-group: default_tx_group
  service: #seata-server对于微服务来说是server,但是seata-server对于nacos来说就是client客户端
    vgroupMapping:
      default_tx_group: default
    grouplist: #
      default: 127.0.0.1:8091;127.0.0.1:8092
  registry:
    nacos:
      server-addr: 172.18.0.2:8848
      application: seata-server
      group: SEATA_GROUP

#  sh nacos-config.sh -h localhost -p 8848 -g SEATA_GROUP -t 084bf2e3-d5bb-4f7d-8ecb-e2d2394ba4cc -u nacos -w nacos